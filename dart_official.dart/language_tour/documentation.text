 // LANGUAGE TOUR
 
 VOID - A special type that indicates a value that's never used.
 $variableName / ${expression} - String interpolation. 
 main() - a special required top level function where app execution starts. 

Disclaimer - 
 1. Everything being place in a variable is an object, and every object is an instance of a class. 
 2. Dart supports generic types,like List<int> - a list of integers, or List<object> - a list of objects of any type. 
 3. Dart has both expressions - having runtime value and statements. 
 Example: conditional expression - CONDITION ? EXPR1: EXPR2 has a value of expression 1 or expression 2.  
 4. It reports two kinds of problems : warnings and errors.

 late variables - having two classes:  Declaring a non nullable variable that's initializes after its' declaration and  lazily initializing a variable. 

 Built-in types : 
     * Numbers(int, double), 
     * Strings(String),
     * Booleans(bool),
     *  Lists(List - also known as array),
     *  Sets(Set), 
     * Maps(Map), 
     * Runes(Runes - often replaced by the character API),
     *  Symbols(Symbol), 
     * The value null (Null).   

Special roles in the dart language: 
 1. object: the superclass of all dart classes except null
 2. enum: the superclass of all enums
 3. future and stream: used in asynchrony support. 
 4. iterable: used in for in loops and in synchronous generator functions.
 5. dynamic: indicatesthat being able to disable static checking. 
 6. void: indicates that a value is never used, often used as a return type. 


NUMBERS
 They tends to be of two flavors : int and double. 

STRINGS
1. Disclaimer: double quotes work best. E.g: "It's even easier to use the other delimeter". 
2. To get the string corresponding to an object, dart calls the objects toString() method.  eg. get.toUpperCase()
3. Strings can be concatenated using the + operator. 
4. Using raw string ( var s= r'In the beginning.')

BOOLEANS 
 1. The type name is bool, having two types which are - true and false. 

LISTS 
 1. var list = [1, 2,3]; - list for integers ( List<int> )
 2. var lsit = ['hello', 'world', 'how you doing']

 Note:
 * Lists uses the zero based indexing, where 0 is the index of the first value and list.length - 1 is the index of the last value. 
 * Using the .length property and access a lists' value using the subscript operator [] 
 * Using spread operator(...) and the null aware spead operator(...?) which provide a concise way to insert multiple values into a collection. 
 Example: var list = [1,2,3] var list2 = [0, ...list] 
    Note: If the expression to the right of the spread operator might be null, to avoid exceptions , by using the null aware spread operator(...?) Example: var list2 = [ 0, ...?list]; 
  * Using COLLECTION IF ( to create a list with three or four items in it ) and COLLECTION FOR ( to manipulate the items of a list before adding them to another list ), using to build collections using the conditional -if and repetition -for. 
  Example: 
  * COLLECTION IF : var nav = ['home', 'furniture', 'plants' , if(promoActive) 'Outlets']; 
  * COLLECTION FOR : var listOfInts = [1,2,3] , var listOfStrings = ['#0, for(var i in listOfInts) '#$i']; 

SETS 
 It's an unorderd  collection of unique items. Example: var halogens = {'flourine', 'bromine', 'ioodine' , 'chlorine'}
 Disclaimer: It infers that halogens has the type Set<String>. 

MAPS 
 It's an object that associates keys and values, tending to be of any type of object. 
 Example: var gifts = { 'first' : 'partidge', 'second' : 'golden rings' } ,
 var nobleGases = { 2: 'helieum' , 10: 'neon' } // Key : Value 
 Map<String, String> , Map<int, String> 

// Creating the same objects using a Map constructor: 
 var gifts = Map<String, String>(); 
 gifts['first'] = 'hello'; 
 gifts['second'] = 'world'; 

 var nobleGases = Map<int, String>(); 
 nobleGases[2] = 'hello'; 
 nobleGases[18] = 'world'; 

FUNCTIONS 
 Dart is a true object oriented language, functions are objects and have a type. 
   Example: 
     bool isNoble(int atomicNumber){
      return _nobleGases[atomicNumber] != null; 
     }
 1. Note: the function will still work if data type is ommitted, case study: omit bool in the funciton above. 
 2. The shorthand for {return expr;} is => notation. 

 * PARAMETERS - a function can have any number of required positional parameters. 
  They can either be followed by 'named parameters' or by 'optioinal positional    parameters'. 

 * NAMED PARAMETERS - they are optional unless they're explicitly marked as required. 
  When calling a function, specify named arguments using paramName: value
  Example: enableFlags(bold: true, hidden: false);

  Named parameters jto be mandatory - annotate with 'required' . 
  const Scrollbar({super.key, required Widget child}); 

  Optional positional parameters - wrapping a set of functions parameters in [] marks them as optional positional parameters. 

 THE MAIN() FUNCTION
 Every app must have a top level main() function which serves as the entrypoint to the app.  

  Simple main() function: 
  void main() {
    print('hello world'); 
  }

  main() function that takes arguments: 
  void main(List<String> arguments) {
    print(arguments); 

    assert(arguments.length == 2); 
    assert(int.parse(arguments[0]) == 1); 
    assert(arguments[1] == 'test'); 
  }

  Note: functions can be passed as a parameter to another function. 
  Example: void printElement(int element) {
    print(element); 
  }
  var list = [1,2,3]; 
  // pass printElement as a parameter. 

OPERATORS 
 1. Unary postfix : expr++, expr--
 2. Unary prefix: ++expr, --expr
 3. Bitwise AND : & 
 4. Bitwise OR: | 
 5. Relational and type test: >=, > , <=, < 
 6. equality: == , != 
 7. logical AND: &&
 8. logical OR: ||
 9. If null: ??
 10. Conditional: expr1 ? expr2: expr3
 11. Cascade: .. , ?..
 12. Assignment: =, *=, /= , -=, etc

 ARITHMETIC OPERATORS
  1. Add: +
  2. Subtract: -
  3. Divide : / 
  4. Divide, return an integer result : ~/
  5. Remainder of an integer division ( modulo ) : % 

PREFIX AND POSTFIX INCREMENT AND DECREMENT OPERATORS
 1. ++var: var = var+1 ( expression value is var + 1)
 2. var++ : var = var+1 ( expression value is var)
 3. --var: var= var-1 ( expression value is var - 1)
 4. var--: var = var - 1 ( expression value is var)

 Example: 
  int a; 
  int b; 

  a = 0; 
  b = ++a; // Increment a before b gets its balue. 
  assert(a == b); // 1 == 1 

  a = 0; 
  b = a++; // Increment a after b gets its value
  assert(a != b); 1 != 0 

  a = 0; 
  b = a--; // decrement a after b gets its value
  assert(a != b); // -1 != 0

  a = 0; 
  b = --a; // decrement a before b gets its value
  assert(a == b);  // -1 == -1 

TYPE TEST OPERATORS
 The as,is and is! operators are handy for checking types at runtime. 
 1. as : typecast
 2. is : true if the object has the specified type
 3. is! : true if the object doesn't have the specified type.

 Example: 
 * Using the AS operator to cast an object to a particular type if and only if you are sure that the object is of that type. 
   (employee as Person).firstName = 'Bob'; 

  *  Using the IS operator of an object not being sure of. 
   If (employee is Person) {
    // type checking
    employee.firstName = 'Bob'; 
   }

  ASSIGNMENT OPERATORS
   Using the ??= operator, if the assigned to variable is null. 
   
   Example: 
   // assign value to A
   a = value; 
   // assign value to B if B is null, otherwise B stays the same
   b ??= value; 


  LOGICAL OPERATORS
  1. !expr: inverts the expression ( changes false to true, and vice-versa)
  2. || : logical OR
  3. && : logical AND 

  Example: 
  if(!done && (col == 0  || col == 3)) {
    // ... Do something.... 
  }

CONDITIONAL EXPRESSIONS 
 Two conditions for the if-else statements: 
  * condition ? expr1 : expr2  ( evaluates expr1 and returns its value, otherwise evaluates and returns the value of expr2). 
  Example: 
  var visibility = isPublic ? 'public' : 'private'; 

  * expr1 ?? expr2 ( if expr1 is non-null returns its value, otherwise evaluates and returns the value of expr2).
  Example: 
  String playerName(String? name) => name ?? 'Guest';  
  Example: 

  // Slightly longer version usiing ?: operator
  String playerName(String? name) => name != null ? name : 'Guest'; 

  // Very long version using the if-else statement. 
  String playerName(String? name) {
    if(name != null) {
      return name; 
    } else {
      return 'Guest'; 
    }
  }


CASCADE NOTATION 
 Making of creating a temporary variable. 

 Example: 
  var paint = Paint()
    ..color = Colors.black
    ..strokeCap = StrokeCap.round
    ..strokeWidth = 5.0 

  Not using the Cascade notation
   var paint = Paint(); 
   paint.color = Colors.black; 
   paint.strokeCap = StrokeCap.round; 
   paint.strokeWidth = 5.0; 

CONTROL FLOW STATEMENTS 
 1. If and else
   
   Example: 
   if(isRaining()) {
    you.bringRainCoat(); 

   } else if(isSnowing()){
    you.wearJacket(); 
   } else {
    car.putTopDown(); 
   }

 2. for loops - iterable with the standard of loop. 

    Example: 
    var message = StringBuffer('Dart is fun'); 
    for (var i = 0; i < 5; i++) {
      message.write('!'); 
    }
  
  iterable classes can also have a FOREACH method as another option.
     Example: 
     var collection = [1,2,3]; 
     collection.forEach(print); 

 3. while and do-while loops - a WHILE loop evaluates the condition before the loop, 
    while DO-WHILE loop evaluates the condition after the loop. 

    // while loop
    while(!isDone()) {
      doSomething(); 
    }
    
    // do-while loop
    do{
      printLine(); 
    } while (!atEndOfPage()); 

 4. break and continue - using BREAK to stop looping and CONTINUE to skip to the next iteration.  
     Example: - BREAK
     
     while (true) {
      if (shutDownRequested()) break; 
      processIncomingRequests(); 
     }

     Example: - CONTINUE

     for (int i= 0 ; i < candidates.length; i++) {
      var candidate = candidates[i]; 
      if (candidate.yearsExperience < 5) {
        continue; 
      }
      candidate.interview(); 
     }

 5. switch and case 
     Valid ways to end a non empty case clause are a CONTINUE, THROW or RETURN statement. 

     Example: 
     1. Using a DEFAULT class to run code when no CASE clause matches: 
       
       var command = 'OPEN'; 
       switch (command) {
        case 'CLOSED': 
          executeClosed(); 
          break; 
        case 'PENDING': 
          executePending(); 
          break; 
        case 'APPROVED': 
          executeApproved(); 
          break; 
        case 'DENIED': 
         executeDenied(); 
          break; 
        case 'OPEN': 
         executeOpen(); 
          break; 
        default: 
          executeUnknown();  
       }

    Note: Dart support empty case clause, allowing a form of fall through. 
        var command = 'CLOSED'; 
        switch (command) {
          case 'CLOSED': // empty case falls through. 
          case 'NOW_CLOSED': 
            // runs for both CLOSED and NOW_CLOSED. 
            executeNowClosed(); 
            break; 
        }

    2. To be able to fall through, using a CONTINUE statement and a LABEL: 
        Example: 
        var command = 'CLOSED'; 
        switch (command) {
          case 'CLOSED': 
           executeClosed(); 
           continue nowClosed; 
           // Continues executing at the nowClosed label.

          nowClosed: 
          case 'NOW_CLOSED': 
           // runs for both CLOSED and NOW_CLOSED. 
            executeNowClosed(); 
             break; 
        }
 6. assert - it is used when debugging code, letting you test if a condition in the code returns TRUE , if not the program will 
              raise an AssertionError. 
  
  When do assertion works? though it depends on the tools and the framework being used: 
     1. Flutter enables assertions in DEBUG MODE. 
     2. Development only tools such as [webdev serve] typically enable assertions by default. 
     3. Some tools such as dart run and [dart compile js] support assertions through a command line flag: -- enalble-asserts. 


EXCEPTIONS 
 They are errors showing that something unexpected happened. Dart provides exception and error types. Dart program can throw any non null object. 

  1. THROW
 throwing or raising an exception
  
  Example: 
   throw FormatException('Expected at least 1 section'); 

   Objects can also be throw: 
    Example: 
     throw 'Out of Illams!'; 

  2. CATCH 
Catching or capturing an exception stops the exception from propagating. Catching an exception gives a chance to handle it. 

  Example: 
   try{
    breedMoreLiamas(); 

   } on OutOfLiamasException{
    buyMoreLiamas(); 
   } 

   To partially handle an exception, while allowing it to propagate, using the RETHROW keyword. 
    
    Example: 
    void misbehave() {
      try {
        dynamic foo = true; 
        print(foo++); // runtime error 
      } catch (e) {
        print('misbehave() partially handled ${e.runtimeType}.'); 
        rethrow;  // allow callers to see the exception. 
      }
    }

    void main() {
      try{
        misbehave(); 
      } catch (e) {
        print('main() finished handling ${e.runtimeType}.'); 
      }
    }